package lsieun;import lsieun.utils.FileUtils;import org.objectweb.asm.ClassWriter;import org.objectweb.asm.FieldVisitor;import org.objectweb.asm.MethodVisitor;import org.objectweb.asm.Opcodes;/***  生成*** */public class ClassFileGenerator {    public static void main(String[] args) {        String relativePath = "sample/HelloWorld.class";        String filePath = FileUtils.getFilePath(relativePath);        //byte[] bytes = dump();        byte[] bytes = dum8();        FileUtils.writeBytes(filePath, bytes);    }    /**     * 生成接口     *  public interface HelloWorld {}     * @return     */    public static byte[] dump() {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);        cw.visit(Opcodes.V1_8,                Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT | Opcodes.ACC_INTERFACE,                "sample/HelloWorld",                null,                "java/lang/Object",                null);        cw.visitEnd();        return cw.toByteArray();    }    /**     * 生成接口 + 字段 + 方法     * public interface HelloWorld extends Cloneable {     *     int LESS = 0;     *     int compareTo(Object o);     * }     */    public static byte[] dump2() {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);        cw.visit(Opcodes.V1_8,                Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT | Opcodes.ACC_INTERFACE,                "sample/HelloWorld",                null,                "java/lang/Object",                new String[] {"java/lang/Cloneable"});        FieldVisitor fv = cw.visitField(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL | Opcodes.ACC_STATIC,                "LESS",                "I",                null,                -1);        fv.visitEnd();        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT,                "compareTo",                "(Ljava/lang/Object;)I",                null,                null);        mv.visitEnd();        cw.visitEnd();        return cw.toByteArray();    }    /**     * 生成类     * public class HelloWorld {     *  static {     *      System.out.printf("static code block")     *  }     * }     */    public static byte[] dump3() {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);        cw.visit(Opcodes.V1_8,                Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,                "sample/HelloWorld",                null,                "java/lang/Object",                null);        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC,                "<init>",                "()V",                null,                null);        mv.visitCode();        mv.visitEnd();        MethodVisitor mv2 = cw.visitMethod(Opcodes.ACC_STATIC,                "<cinit>",                "()V",                null,                null);        mv2.visitCode();        mv2.visitEnd();        cw.visitEnd();        return cw.toByteArray();    }    /**     * public interface HelloWorld {     *   @MyTag(name="tomcat", age = 10)     *   int intValue = 10;     *     * }     *     * public @interface MyTag {     *     String name();     *     int age();     * }     *     *     * @return     */    public static byte[] dump4() {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);        cw.visit(Opcodes.V1_8,                Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT | Opcodes.ACC_INTERFACE,                "sample/HelloWorld",                null,                "java/lang/Object",                null);        FieldVisitor fv = cw.visitField(Opcodes.ACC_PRIVATE ,                "LESS",                "I",                null,                -1);        fv.visitEnd();        cw.visitEnd();        return cw.toByteArray();    }    /**     * methodVisitor 示例， 构造方法     */    public static byte[] dump5() {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);        cw.visit(Opcodes.V1_8,                Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,                "sample/HelloWorld",                null,                "java/lang/Object",                null);        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC,                "<init>",                "()V",                null,                null);        mv.visitCode();        mv.visitVarInsn(Opcodes.ALOAD, 0);        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object","<init>", "()V", false);        mv.visitInsn(Opcodes.RETURN);        mv.visitMaxs(1, 1);        mv.visitEnd();        cw.visitEnd();        return cw.toByteArray();    }    /**     * 静态代码块生成     *     */    public static byte[] dump6() {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);        cw.visit(Opcodes.V1_8,                Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,                "sample/HelloWorld",                null,                "java/lang/Object",                null);        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC,                "<init>",                "()V",                null,                null);        mv.visitCode();        mv.visitVarInsn(Opcodes.ALOAD, 0);        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object","<init>", "()V", false);        mv.visitInsn(Opcodes.RETURN);        mv.visitMaxs(1, 1);        mv.visitEnd();        mv = cw.visitMethod(Opcodes.ACC_STATIC, "<clinit>", "()V", null, null);        mv.visitCode();        mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");        mv.visitLdcInsn("class initialization");        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);        mv.visitInsn(Opcodes.RETURN);        mv.visitMaxs(2, 0);        mv.visitEnd();        cw.visitEnd();        return cw.toByteArray();    }    /**     * 创建对象     */    public static byte[] dump7() {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);        cw.visit(Opcodes.V1_8,                Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,                "sample/HelloWorld",                null,                "java/lang/Object",                null);        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC,                "<init>",                "()V",                null,                null);        mv.visitCode();        mv.visitVarInsn(Opcodes.ALOAD, 0);        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object","<init>", "()V", false);        mv.visitInsn(Opcodes.RETURN);        mv.visitMaxs(1, 1);        mv.visitEnd();        mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "test", "()V", null, null);        mv.visitCode();        mv.visitTypeInsn(Opcodes.NEW, "sample/GoodChild");        mv.visitInsn(Opcodes.DUP);        mv.visitLdcInsn("lucy");        mv.visitIntInsn(Opcodes.BIPUSH, 8);        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "sample/GoodChild", "<init>", "(Ljava/lang/String;I)V", false);        mv.visitVarInsn(Opcodes.ASTORE, 1);        mv.visitInsn(Opcodes.RETURN);        mv.visitMaxs(4, 2);        mv.visitEnd();        cw.visitEnd();        return cw.toByteArray();    }    /**     * 调用方法     *     */    public static byte[] dum8() {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);        cw.visit(Opcodes.V1_8,                Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,                "sample/HelloWorld",                null,                "java/lang/Object",                null);        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC,                "<init>",                "()V",                null,                null);        mv.visitCode();        mv.visitVarInsn(Opcodes.ALOAD, 0);        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object","<init>", "()V", false);        mv.visitInsn(Opcodes.RETURN);        mv.visitMaxs(1, 1);        mv.visitEnd();        mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "test", "(II)V", null, null);        mv.visitCode();        mv.visitVarInsn(Opcodes.ILOAD, 1);        mv.visitVarInsn(Opcodes.ILOAD, 2);        mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Math", "max", "(II)I", false);        mv.visitVarInsn(Opcodes.ISTORE, 3);        mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");        mv.visitVarInsn(Opcodes.ILOAD, 3);        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(I)V", false);        mv.visitInsn(Opcodes.RETURN);        mv.visitMaxs(2, 4);        mv.visitEnd();        cw.visitEnd();        return cw.toByteArray();    }    /**     * 交叉使用 MethodVisitor 生成类     *     * */    public static byte[] dum9() {        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);        cw.visit(Opcodes.V1_8,                Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,                "sample/HelloWorld",                null,                "java/lang/Object",                null);        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC,                "<init>",                "()V",                null,                null);        mv.visitCode();        mv.visitVarInsn(Opcodes.ALOAD, 0);        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object","<init>", "()V", false);        mv.visitInsn(Opcodes.RETURN);        mv.visitMaxs(1, 1);        mv.visitEnd();        {            MethodVisitor mv2 = cw.visitMethod(Opcodes.ACC_PUBLIC, "test", "()V", null, null);            MethodVisitor mv3 = cw.visitMethod(Opcodes.ACC_PUBLIC, "printDate", "()V", null, null);            mv3.visitCode();            mv3.visitTypeInsn(Opcodes.NEW, "java/util/Date");            mv3.visitInsn(Opcodes.DUP);            mv3.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/util/Date", "<init>", null, false);            mv2.visitCode();            mv2.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            mv2.visitLdcInsn("test method");            mv2.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);            mv3.visitVarInsn(Opcodes.ASTORE, 1);            mv3.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            mv3.visitVarInsn(Opcodes.ALOAD, 1);            mv3.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/Object;)V", false);            mv2.visitInsn(Opcodes.RETURN);            mv2.visitMaxs(2, 1);            mv2.visitEnd();            mv3.visitInsn(Opcodes.RETURN);            mv3.visitMaxs(2, 2);            mv3.visitEnd();        }        cw.visitEnd();        return cw.toByteArray();    }}