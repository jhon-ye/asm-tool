package lsieun.cv;import org.objectweb.asm.ClassVisitor;import org.objectweb.asm.MethodVisitor;public abstract class ClassAddMethodVisitor extends ClassVisitor {    private final int methodAccess;    private final String methodName;    private final String methodDesc;    private final String methodSignature;    private final String[] methodExceptions;    private boolean isMethodPresent;    public ClassAddMethodVisitor(int api, ClassVisitor classVisitor, int methodAccess, String methodName, String methodDesc, String methodSignature, String[] methodExceptions) {        super(api, classVisitor);        this.methodAccess = methodAccess;        this.methodName = methodName;        this.methodDesc = methodDesc;        this.methodSignature = methodSignature;        this.methodExceptions = methodExceptions;    }    @Override    public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {        if (name.equals(methodName) && descriptor.equals(methodDesc)) {            isMethodPresent = true;        }        return super.visitMethod(access, name, descriptor, signature, exceptions);    }    @Override    public void visitEnd() {        if (!isMethodPresent) {            MethodVisitor mv = super.visitMethod(methodAccess, methodName, methodDesc, methodSignature, methodExceptions);            if (mv != null) {                generateMethodBody(mv);            }        }        super.visitEnd();    }    protected abstract void generateMethodBody(MethodVisitor mv);}