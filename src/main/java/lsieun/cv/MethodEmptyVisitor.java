package lsieun.cv;import org.objectweb.asm.ClassVisitor;import org.objectweb.asm.MethodVisitor;import org.objectweb.asm.Opcodes;import org.objectweb.asm.Type;public class MethodEmptyVisitor extends ClassVisitor {    private String owner;    private final String methodName;    private final String methodDesc;    public MethodEmptyVisitor(int api, ClassVisitor classVisitor, String methodName, String methodDesc) {        super(api, classVisitor);        this.methodName = methodName;        this.methodDesc = methodDesc;    }    @Override    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {        super.visit(version, access, name, signature, superName, interfaces);        this.owner = name;    }    @Override    public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {        MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);        if (mv != null && methodName.equals(name) && methodDesc.equals(descriptor)) {            boolean isAbstractMethod = (access & Opcodes.ACC_ABSTRACT) == Opcodes.ACC_ABSTRACT;            boolean isNativeMethod = (access & Opcodes.ACC_NATIVE) == Opcodes.ACC_NATIVE;            if (!isAbstractMethod && !isNativeMethod) {                generateNewBody(mv, owner, access, name, descriptor);                // 删除 code body                return null;            }        }        return mv;    }    // 生成新 code body    private void generateNewBody(MethodVisitor mv, String owner, int access, String name, String descriptor) {        Type type = Type.getType(descriptor);        Type[] argumentTypes = type.getArgumentTypes();        Type returnType = type.getReturnType();        // 计算 本地变量大小 和 操作数栈大小        boolean isStaticMethod = (access & Opcodes.ACC_STATIC) != 0;        int localSize = isStaticMethod ? 0 : 1;        for (Type argumentType : argumentTypes) {            localSize += argumentType.getSize();        }        int stackSize = returnType.getSize();        mv.visitCode();        if (returnType.getSort() == Type.VOID) {            mv.visitInsn(Opcodes.RETURN);        } else if (returnType.getSort() >= Type.BOOLEAN && returnType.getSort() <= Type.DOUBLE) {            mv.visitInsn(returnType.getOpcode(Opcodes.ICONST_1));            mv.visitInsn(Opcodes.IRETURN);        } else {            mv.visitInsn(Opcodes.ACONST_NULL);            mv.visitInsn(Opcodes.ARETURN);        }        mv.visitMaxs(stackSize, localSize);        mv.visitEnd();    }}