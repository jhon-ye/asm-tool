package lsieun.cv;import org.objectweb.asm.ClassVisitor;import org.objectweb.asm.MethodVisitor;import org.objectweb.asm.Opcodes;import org.objectweb.asm.Type;public class MethodParamVisitor extends ClassVisitor {    public MethodParamVisitor(int api, ClassVisitor classVisitor) {        super(api, classVisitor);    }    @Override    public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {        MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);        if (mv != null && !"<init>".equals(name)) {            mv = new MethodParamAdapter(api, mv, access, name, descriptor);        }        return mv;    }    private static class MethodParamAdapter extends MethodVisitor {        private final int methodAccess;        private final String methodName;        private final String methodDesc;        public MethodParamAdapter(int api, MethodVisitor methodVisitor, int methodAccess, String methodName, String methodDesc) {            super(api, methodVisitor);            this.methodAccess = methodAccess;            this.methodName = methodName;            this.methodDesc = methodDesc;        }        /**         * 方法进入时操作         */        @Override        public void visitCode() {            boolean isStatic = (methodAccess & Opcodes.ACC_STATIC) != 0;            int slotIndex = isStatic? 0 : 1;            Type methodType = Type.getMethodType(methodDesc);            Type[] argumentTypes = methodType.getArgumentTypes();            for (Type t : argumentTypes) {                int sort = t.getSort();                int size = t.getSize();                String descriptor = t.getDescriptor();                int opcode = t.getOpcode(Opcodes.ILOAD);                super.visitVarInsn(opcode, slotIndex);                if (sort == Type.BOOLEAN) {                    printBoolean();                } else if (sort == Type.CHAR) {                    printChar();                } else if (sort == Type.BYTE || sort == Type.SHORT || sort == Type.INT) {                    printInt();                } else if (sort == Type.FLOAT) {                    printFloat();                } else if (sort == Type.LONG) {                    printLong();                } else if (sort == Type.DOUBLE) {                    printDouble();                } else if (sort == Type.OBJECT && "Ljava/lang/String;".equals(descriptor)) {                    printString();                } else {                }                slotIndex += size;            }            super.visitCode();        }        /**         *  方法退出时操作         * @param opcode the opcode of the instruction to be visited. This opcode is either NOP,         *     ACONST_NULL, ICONST_M1, ICONST_0, ICONST_1, ICONST_2, ICONST_3, ICONST_4, ICONST_5,         *     LCONST_0, LCONST_1, FCONST_0, FCONST_1, FCONST_2, DCONST_0, DCONST_1, IALOAD, LALOAD,         *     FALOAD, DALOAD, AALOAD, BALOAD, CALOAD, SALOAD, IASTORE, LASTORE, FASTORE, DASTORE,         *     AASTORE, BASTORE, CASTORE, SASTORE, POP, POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2,         *     SWAP, IADD, LADD, FADD, DADD, ISUB, LSUB, FSUB, DSUB, IMUL, LMUL, FMUL, DMUL, IDIV, LDIV,         *     FDIV, DDIV, IREM, LREM, FREM, DREM, INEG, LNEG, FNEG, DNEG, ISHL, LSHL, ISHR, LSHR, IUSHR,         *     LUSHR, IAND, LAND, IOR, LOR, IXOR, LXOR, I2L, I2F, I2D, L2I, L2F, L2D, F2I, F2L, F2D, D2I,         *     D2L, D2F, I2B, I2C, I2S, LCMP, FCMPL, FCMPG, DCMPL, DCMPG, IRETURN, LRETURN, FRETURN,         *     DRETURN, ARETURN, RETURN, ARRAYLENGTH, ATHROW, MONITORENTER, or MONITOREXIT.         */        @Override        public void visitInsn(int opcode) {            if (Opcodes.IRETURN <= opcode && Opcodes.RETURN >= opcode || Opcodes.ATHROW == opcode) {                if (opcode == Opcodes.IRETURN) {                    super.visitInsn(Opcodes.DUP);                    printInt();                } else if (opcode == Opcodes.FRETURN) {                    super.visitInsn(Opcodes.DUP);                    printFloat();                }else if (opcode == Opcodes.LRETURN) {                    super.visitInsn(Opcodes.DUP2);                    printLong();                } else if (opcode == Opcodes.DRETURN) {                    super.visitInsn(Opcodes.DUP2);                    printDouble();                } else if (opcode == Opcodes.ARETURN) {                    super.visitInsn(Opcodes.DUP);                    printString();                } else if (opcode == Opcodes.RETURN) {                    printMessage("method exit");                } else {                }            }            super.visitInsn(opcode);        }        private void printBoolean() {            super.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            super.visitInsn(Opcodes.SWAP);            super.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/PrintStream", "printLn", "(Z)V", false);        }        private void printChar() {            super.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            super.visitInsn(Opcodes.SWAP);            super.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/PrintStream", "printLn", "(C)V", false);        }        private void printInt() {            super.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            super.visitInsn(Opcodes.SWAP);            super.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/PrintStream", "printLn", "(I)V", false);        }        private void printFloat() {            super.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            super.visitInsn(Opcodes.SWAP);            super.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/PrintStream", "printLn", "(F)V", false);        }        private void printLong() {            super.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            super.visitInsn(Opcodes.DUP_X2);            super.visitInsn(Opcodes.POP);            super.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/PrintStream", "printLn", "(J)V", false);        }        private void printDouble() {            super.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            super.visitInsn(Opcodes.DUP_X2);            super.visitInsn(Opcodes.POP);            super.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/PrintStream", "printLn", "(D)V", false);        }        /*        * 交换操作数栈位置， 此方法用于打印参数已经在操作数栈上的场景        * */        private void printString() {            super.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            super.visitInsn(Opcodes.SWAP);            super.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/PrintStream", "printLn", "(Ljava/lang/String;)V", false);        }        private void printMessage(String str) {            super.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            super.visitLdcInsn(str);            super.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/io/PrintStream", "printLn", "(Ljava/lang/String;)V", false);        }    }}