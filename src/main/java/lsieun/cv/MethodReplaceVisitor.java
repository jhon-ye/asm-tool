package lsieun.cv;import org.objectweb.asm.ClassVisitor;import org.objectweb.asm.MethodVisitor;import org.objectweb.asm.Opcodes;public class MethodReplaceVisitor extends ClassVisitor {    private final String oldOwner;    private final String oldMethodName;    private final String oldMethodDesc;    private final int newOpcode;    private final String newOwner;    private final String newMethodName;    private final String newMethodDesc;    public MethodReplaceVisitor(int api, ClassVisitor classVisitor, String oldOwner, String oldMethodName, String oldMethodDesc, int newOpcode, String newOwner, String newMethodName, String newMethodDesc) {        super(api, classVisitor);        this.oldOwner = oldOwner;        this.oldMethodName = oldMethodName;        this.oldMethodDesc = oldMethodDesc;        this.newOpcode = newOpcode;        this.newOwner = newOwner;        this.newMethodName = newMethodName;        this.newMethodDesc = newMethodDesc;    }    @Override    public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {        MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);        if (mv != null && !"<init>".equals(name) && !"<cinit>".equals(name)) {            boolean isAbstractMethod = (access & Opcodes.ACC_ABSTRACT) == Opcodes.ACC_ABSTRACT;            boolean isNativeMethod = (access & Opcodes.ACC_NATIVE) == Opcodes.ACC_NATIVE;            if (!isAbstractMethod && !isNativeMethod) {                mv = new MethodReplaceAdapter(api, mv);            }        }        return mv;    }    private class MethodReplaceAdapter extends MethodVisitor {        public MethodReplaceAdapter(int api, MethodVisitor methodVisitor) {            super(api, methodVisitor);        }        @Override        public void visitMethodInsn(int opcode, String owner, String name, String descriptor, boolean isInterface) {            if (oldOwner.equals(owner) && oldMethodName.equals(name) && oldMethodDesc.equals(descriptor)) {                super.visitMethodInsn(newOpcode, newOwner, newMethodName, newMethodDesc, false);            }            super.visitMethodInsn(opcode, owner, name, descriptor, isInterface);        }    }}