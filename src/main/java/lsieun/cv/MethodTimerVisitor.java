package lsieun.cv;import com.sun.org.apache.xpath.internal.operations.Or;import org.objectweb.asm.ClassVisitor;import org.objectweb.asm.FieldVisitor;import org.objectweb.asm.MethodVisitor;import org.objectweb.asm.Opcodes;public class MethodTimerVisitor extends ClassVisitor {    private String owner;    private boolean isInterface;    public MethodTimerVisitor(int api, ClassVisitor classVisitor) {        super(api, classVisitor);    }    @Override    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {        super.visit(version, access, name, signature, superName, interfaces);        owner = name;        isInterface = (access & Opcodes.ACC_PUBLIC) != 0;    }    @Override    public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {        MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);        if (!isInterface && mv != null && !"<init>".equals(name) && !"<cinit>".equals(name)) {            boolean isAbstractMethod = (access & Opcodes.ACC_ABSTRACT) == Opcodes.ACC_ABSTRACT;            boolean isNativeMethod = (access & Opcodes.ACC_NATIVE) == Opcodes.ACC_NATIVE;            if (!isAbstractMethod && !isNativeMethod) {                mv = new MethodTimerAdapter(api, mv, owner);            }        }        return mv;    }    @Override    public void visitEnd() {        if (!isInterface) {            FieldVisitor fv = super.visitField(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "timer", "J", null, null);            if (fv != null) {                fv.visitEnd();            }        }        super.visitEnd();    }    private static class MethodTimerAdapter extends MethodVisitor {        private final String owner;        public MethodTimerAdapter(int api, MethodVisitor methodVisitor, String owner) {            super(api, methodVisitor);            this.owner = owner;        }        @Override        public void visitCode() {            super.visitFieldInsn(Opcodes.GETSTATIC, owner, "timer", "J");            super.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);            super.visitInsn(Opcodes.LSUB);            super.visitFieldInsn(Opcodes.PUTSTATIC, owner, "timer", "J");            super.visitCode();        }        @Override        public void visitInsn(int opcode) {            if (Opcodes.IRETURN <= opcode && Opcodes.RETURN >= opcode || Opcodes.ATHROW == opcode) {                super.visitFieldInsn(Opcodes.GETSTATIC, owner, "timer", "J");                super.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);                super.visitInsn(Opcodes.LADD);                super.visitFieldInsn(Opcodes.PUTSTATIC, owner, "timer", "J");            }            super.visitInsn(opcode);        }    }}